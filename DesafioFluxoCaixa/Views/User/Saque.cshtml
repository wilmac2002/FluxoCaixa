@model DesafioFluxoCaixa.Models.Transacoes.Withdraw

@{
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
    ViewData["Title"] = "Saque";
}

<h1>Sacar</h1>

<h3 id="Saldo">Saldo: R$@Model.Conta.Balance</h3>

<hr />
<div class="row">
    <div class="col-md-4">
        <form data-bind="submit: ValidarDados">
            <div class="text-danger"></div>
            <div class="form-group">
                <label class="control-label">Valor *</label>
                <input type="number" step=".01" id="Valor" data-bind="value: Valor, css: { 'is-invalid': Valor.error() && Valor.isModified() }" placeholder="R$" class="form-control text-center">
            </div>
            <div class="form-group">
                <label class="control-label">Descrição</label>
                <input data-bind="value: Descricao" type="text" class="form-control" />
            </div>
            <div class="form-group text-center mt-3">
                <input type="submit" value="Sacar" class="btn btn-success" />
            </div>
        </form>
    </div>
</div>

<script type="text/javascript">

    function viewModel() {

        var self = this;

        ko.validation.init({

            insertMessages: true,
            errorMessageClass: 'invalid-feedback', //Classe do span da msg de erro
            errorClass: 'is-invalid', //Classe do input com a info errada

        }, true);

        //cria nova regra
        ko.validation.rules["saldo"] = {

            validator: function (value) {
                var saldo = @Convert.ToDouble(Model.Conta.Balance.ToString().Replace(",", ""));
                console.log(saldo);
                console.log(value);
                return value <= saldo;
            },

            message: "O valor não pode exceder o saldo atual"
        };
        //cadastra as regras
        ko.validation.registerExtenders();

        self.Valor = ko.observable(0).extend(
            {
                required:
                {
                    params: true,
                    message: "Preenchimento obrigatório"
                },

                validation:
                {
                    message: "O valor não pode ser menor ou igual à zero",
                    validator: function (value) {
                        return value > 0;
                    }
                },

                number:
                {
                    params: true,
                    message: "O valor precisa ser numérico"
                },

                saldo:true
            });

        self.Descricao = ko.observable();

        var Erros = ko.validation.group(self);
        self.ValidarDados = function () {

            if (Erros().length == 0) {
                self.SendAjax();
            }

            else {
                Erros.showAllMessages();
            }
        };

        self.SendAjax = function () {
            $.ajax({
                type: "POST",
                url: "/CRUD/Sacar",
                data:
                {
                    ContaId: @Model.Conta.Id,
                    Valor: self.Valor,
                    Data: self.Data,
                    Descricao: self.Descricao
                },
                dataType: "json",
                success: function (person) {

                    if (person != null) {
                        Swal.fire({
                            title: 'Confirmado',
                            text: "Saque efetuado com sucesso.",
                            icon: 'success',
                            confirmButtonColor: '#08ac54',
                            confirmButtonText: 'Ok'
                        }).then((result) => {

                            window.location.href = '/User/MandarContaSaque/' + person.id;
                        })
                    }
                }
            });
        }
    }

    $(document).ready(function () {

        vm = new viewModel();
        ko.applyBindings(vm);
    });
</script>

