@model List<DesafioFluxoCaixa.Models.Contas.Account>;

@{
    ViewData["Title"] = "Selecionar Conta";
}

<h1>Depósito</h1>

<h4>Selecione uma conta:</h4>

<table class="table">
    <thead>
        <tr>
            <th>
                Nome do proprietário
            </th>
            <th>
                Limite
            </th>
            <th>
                Mínimo
            </th>
            <th>
                Saldo
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @item.Name
                </td>
                <td>
                    R$ @item.Limit
                </td>
                <td>
                    R$ @item.MinimalBalance
                </td>
                <td>
                    R$ @item.Balance
                </td>
                @*<td>
                        @Html.ActionLink("Depositar", "MandarContaDeposito", "CRUD", new { id = item.Id }, new { @class = "btn btn-success" })
                    </td>*@
                <td>
                    <button onclick="ReceberId(@item.Id,'@item.Name','@item.Balance')" type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#exampleModal">Depositar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!--Modal Deposito-->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="TituloModal">
                </h5>
            </div>
            <form data-bind="submit: ValidarDados">
                <div class="modal-body">
                    <div class="form-group">
                        <label class="control-label">Número da Conta</label>
                        <input id="ContaId" data-bind="value: ContaId" class="form-control text-center" readonly />
                    </div>
                    <div class="mb-3">
                        <label class="control-label">Valor *</label>
                        <input type="number" step=".01" id="Valor" data-bind="value: Valor, css: { 'is-invalid': Valor.error() && Valor.isModified() }" placeholder="R$" class="form-control text-center">
                    </div>
                    <div class="mb-3">
                        <label class="control-label">Descrição</label>
                        <input data-bind="value: Descricao" type="text" class="form-control" />
                    </div>

                </div>
                <div class="modal-footer">
                    <div class="row w-100">
                        <div class="col-6 align-middle">
                            <h5 class="modal-title" id="SaldoAtualModal">
                            </h5>
                        </div>
                        <div class="col-6 d-flex justify-content-end gap-2 align-middle">
                            <input type="submit" value="Depositar" class="btn btn-success" />
                            <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Fechar</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<script type="text/javascript">

    function ReceberId(id, name, saldo) {
        console.log(id);
        console.log(name);
        console.log(saldo);
        $('#ContaId').val(id);
        $('#TituloModal').text('Depositar na conta de ' + name);
        $('#SaldoAtualModal').text('Saldo atual: R$' + saldo);
    }

    function viewModel() {

        var self = this;

        ko.validation.init({

            insertMessages: true,
            errorMessageClass: 'invalid-feedback', //Classe do span da msg de erro
            errorClass: 'is-invalid', //Classe do input com a info errada

        }, true);

        self.Valor = ko.observable().extend(
            {
                required:
                {
                    params: true,
                    message: "Preenchimento obrigatório"
                },

                validation:
                {
                    message: "O valor não pode ser menor ou igual à zero",
                    validator: function (value) {
                        return value > 0;
                    }
                }
            });

        self.Descricao = ko.observable();

        var Erros = ko.validation.group(self);
        self.ValidarDados = function () {

            if (Erros().length == 0) {
                self.SendAjax();
            }

            else {
                Erros.showAllMessages();
            }
        };

        self.SendAjax = function () {
            $.ajax({
                type: "POST",
                url: "/CRUD/Depositar",
                data:
                {
                    ContaId: $('#ContaId').val(),
                    Valor: self.Valor,
                    Data: self.Data,
                    Descricao: self.Descricao
                },
                dataType: "json",
                success: function (retorno) {
                    if (retorno) {
                        Swal.fire({
                            title: 'Confirmado',
                            text: "Depósito efetuado com sucesso.",
                            icon: 'success',
                            confirmButtonColor: '#08ac54',
                            confirmButtonText: 'Ok'
                        }).then((result) => {
                            window.location.href = '/CRUD/SelecionarContaDeposito';
                        })
                    }
                }
            });
        }
    }

    $(document).ready(function () {

        vm = new viewModel();
        ko.applyBindings(vm);
    });

</script>
